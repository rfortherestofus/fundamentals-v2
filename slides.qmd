---
title: Fundamentals of R
format:
  rfortherestofus-slides-revealjs:
    menu: false
    progress: false
    slide-number: false
    show-slide-number: print
    center: true
    incremental: true
    auto-animate: false
    transition: fade
execute: 
  message: false
  warning: false
  cache: false
  echo: true
  output: false
title-slide-attributes:
  data-background-image: assets/rru-hex-bg-gradient-dark.svg
  data-background-size: cover
---



```{r}
#| echo: false
library(tidyverse)
library(janitor)
library(gt)
library(gtExtras)

penguins <- read_csv("penguins.csv")
```

```{r}
#| echo: false
rru_table <- function(df) {
  df |> 
    gt() |> 
    tab_style(
      style = cell_text(weight = "normal",
                        size = px(30),
                        color = "#404e6b"),
      locations = cells_column_labels()
    ) |> 
    tab_style(
      style = cell_text(size = px(30),
                        color = "#404e6b"),
      locations = cells_body()
    ) |> 
    gt_theme_538() |> 
    opt_table_font(font = list(google_font("Inter"), default_fonts()), weight = 400) |> 
    tab_options(
      table.background.color = "transparent",
      column_labels.background.color = "transparent",
      table.width = pct(100),
      heading.padding = px(10),
      data_row.padding = px(10),
      column_labels.border.bottom.color = "#404e6b"
    )
}
```


# Update Everything {.inverse}

## Update Everything

1. R

1. RStudio

1. R Packages

::: {.notes}
- How to check version of R
- How to check version of RStudio
- How to check versions of packages
- Explain that updating R requires reinstall of packages
:::

## Your Turn {.your-turn}

1. Update R

1. Update RStudio

1. Update all packages


# Start a New Project {.inverse}

## Your Turn {.your-turn}

1. Create a new RStudio project

1. Download data from [https://rfor.us/penguins](https://rfor.us/penguins)

1. Copy the data into the RStudio project

1. Create a new R script file and add code to import your data (refer to Getting Started with R if necessary)

1. Save your R script file

# Data Wrangling and Analysis {.inverse}

# The Tidyverse {.inverse}


## Base R Code

```{r}
#| output: true
#| eval: false
#| 
mean(data$satisfaction_rating[data$year==2019])
```

- Starts with function, data frame in parentheses

- Uses dollar sign (`data$satisfaction_rating`) notation

- Uses bracket (`[data$year==2019]`) notation

- Repeats data frame name each time you call it

## Tidyverse Code

```{r}
#| output: true
#| eval: false

data |> 
  filter(year == 2019) |> 
  summarize(mean_satisfaction = mean(satisfaction_rating))
```

- Nicely named functions because "the bottleneck in most data analysis is thinking time" - [The tidy tools manifesto](https://tidyverse.tidyverse.org/articles/manifesto.html)

- "Data frame first, data frame once" - [Alison Hill](https://ohsu-conj620.netlify.app/slides/cm012.html#20)

- Uses the pipe (`|>`) to chain together a series of functions

# Pipes {.inverse}

## Code Without Pipes

```{r}
select(
  mutate(penguins, 
         body_mass_lbs = body_mass_g / 453.6), 
  body_mass_lbs)
```

## Code With Pipes

```{r}
penguins |> 
  mutate(body_mass_lbs = body_mass_g / 453.6) |> 
  select(body_mass_lbs)
```

## Pipes = "Then"

Every time you see a pipe, replace it with the word "then"

---

:::: {.columns}

::: {.column width="50%"}
<p style="font-size: 200px; text-align: center;">
`|>`
</p>

<p style="text-align: center;">
Native pipe
</p>
:::

::: {.column width="50%"}
<p style="font-size: 200px; text-align: center;">
`%>%`
</p>

<p style="text-align: center;">
Tidyverse pipe
</p>
:::

::::

## Keyboard Shortcut for Pipes

:::: {.columns}

::: {.column width="50%"}
**Mac**

Command + Shift + M
:::

::: {.column width="50%"}
**Windows**

Control + Shift + M
:::

::::

## Your Turn {.your-turn}

1. Make sure you have R 4.1 or higher

1. Switch to using native pipe by default

1. Confirm that the keyboard shortcut works to insert a native pipe

::: {.notes}
- Show why we use pipes
- Show how to switch to native pipe
:::


# Tidyverse Functions

- `select()` to keep and drop **columns**

- `mutate()` to **create and change variables**

- `filter()` to keep and drop **rows**

- `summarize()` to create **summaries** of our data

- `group_by()` and `summarize()` to create **grouped summaries**

- `arrange()` to **reorder** our data

# `select()` {.inverse}

## `select()`

```{r}
#| eval: false
data_frame |> 
  select(variable)
```


## Keyboard Shortcut to Run Code

:::: {.columns}

::: {.column width="50%"}
**Mac**

Command + Enter
:::

::: {.column width="50%"}
**Windows**

Control + Enter
:::

::::


# `mutate()` {.inverse}

## `mutate()`

```{r}
#| eval: false
data_frame |> 
  mutate(new_variable = variable + 1)
```

## `mutate()`

```{r}
#| eval: false
penguins |> 
  mutate(weight_bill_ratio = 
           body_mass_g / bill_length_mm) 
```


# `filter()` {.inverse}

## `filter()`

```{r}
#| eval: false
data_frame |> 
  filter(variable > 1)
```

## Comparison Operators

```{r}
#| echo: false
#| output: true

tibble::tribble(
  ~Operator, ~Description, ~Usage,
  "<", "less than", "x < y",
  "<=", "less than or equal to", "x <= y",
  ">", "greater than", "x > y",
  ">=", "greater than or equal to", "x >= y",
  "==", "exactly equal to", "x == y",
  "!=", "not equal to", "x != y",
  "%in%", "group membership", "x %in% y",
  "is.na", "is missing", "is.na(x)",
  "!is.na", "is not missing", "!is.na(x)"
) |> 
  rru_table()
```

::: {.notes}
- Show examples using comparisons
:::

## Logical Operators

```{r}
#| echo: false
#| output: true

tibble::tribble(
  ~Operator, ~Description, ~Usage,
  "&", "and", "x & y",
  "|", "or", "x | y",
  "!", "not", "!x"
) |> 
  rru_table()
```

## Logical Operators

```{r}
#| eval: false
data_frame |> 
  filter(variable > 1 & variable_2 < 1)
```

::: {.notes}
- Show examples combining things with logical operators
:::


# `summarize()` {.inverse}

::: {.notes}
Mention American and British spellings
:::

## `summarize()`

```{r}
#| eval: false
data_frame |> 
  summarize(summary_variable = 
              summary_function(variable))
```


## Summary Functions

```{r}
#| echo: false
#| output: true
#| 
tribble(
  ~Description, ~Function,
  "number", "n()",
  "sum", "sum(x)",
  "minimum", "min(x)",
  "maximum", "max(x)",
  "mean", "mean(x)",
  "median", "median(x)",
  "standard deviation", "sd(x)",
  "variance", "var(x)",
  "rank", "rank(x)"
) |> 
  rru_table()
```


# `group_by()` and `summarize()` {.inverse}

## `group_by()` and `summarize()`

```{r}
#| eval: false
data_frame |> 
  group_by(grouping_variable) |> 
  summarize(summary_variable = summary_function(variable))
```

::: {.notes}
- Also show .by
:::

# `arrange()` {.inverse}

## `arrange()`

```{r}
#| eval: false
data_frame |> 
  arrange(variable)
```



# Create a New Data Frame {.inverse}

## This Does Not Create a New Data Frame

```{r}
#| eval: false
data_frame |> 
  filter(variable > 1) |> 
  arrange(variable)
```

## This Creates a New Data Frame

```{r}
#| eval: false
data_frame_2 <- data_frame |> 
  filter(variable > 1) |> 
  arrange(variable)
```


::: {.notes}
- Show long pipeline and display results
- Show long pipeline and save results
- We typically save objects to use them in ggplot or tables later on
:::

# Bring it All Together {.inverse}

::: {.notes}
- Use [R Community Survey](https://github.com/rstudio/r-community-survey)
:::